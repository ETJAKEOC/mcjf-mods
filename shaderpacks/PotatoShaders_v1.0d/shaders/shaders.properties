screen=INFO <empty> [ATMOS] [LIGHTING] [TERRAIN] [CAMERA] [POST] [MISC]
screen.columns=1

    screen.ATMOS=sunPathRotation transparencyBlurEnabled <empty> [COLORS] [FOG]
    screen.ATMOS.columns=1

        screen.COLORS=[SUNLIGHT] [SKYLIGHT] [FOGCOL] [SKY] [WATER] <empty> <empty> <empty> vanillaFogColor vanillaSkyColor
            screen.SUNLIGHT=sunlightSunriseR sunlightNoonR sunlightSunriseG sunlightNoonG sunlightSunriseB sunlightNoonB sunlightSunriseL sunlightNoonL <empty> <empty> sunlightSunsetR sunlightNightR sunlightSunsetG sunlightNightG sunlightSunsetB sunlightNightB sunlightSunsetL sunlightNightL

            screen.SKYLIGHT=skylightSunriseR skylightNoonR skylightSunriseG skylightNoonG skylightSunriseB skylightNoonB skylightSunriseL skylightNoonL <empty> <empty> skylightSunsetR skylightNightR skylightSunsetG skylightNightG skylightSunsetB skylightNightB skylightSunsetL skylightNightL

            screen.FOGCOL=fogcolSunriseR fogcolNoonR fogcolSunriseG fogcolNoonG fogcolSunriseB fogcolNoonB fogcolSunriseL fogcolNoonL <empty> <empty> fogcolSunsetR fogcolNightR fogcolSunsetG fogcolNightG fogcolSunsetB fogcolNightB fogcolSunsetL fogcolNightL

            screen.SKY=skycolSunriseR skycolNoonR skycolSunriseG skycolNoonG skycolSunriseB skycolNoonB skycolSunriseL skycolNoonL <empty> <empty> skycolSunsetR skycolNightR skycolSunsetG skycolNightG skycolSunsetB skycolNightB skycolSunsetL skycolNightL

            screen.WATER=overrideWaterTexture <empty> waterColorRed waterColorGreen waterColorBlue waterColorAlpha <empty> <empty> waterFogRed waterFogGreen waterFogBlue waterFogFalloff

        screen.FOG=fogEnabled fogStart fogFalloff <empty> waterFogEnabled waterFogFalloff
        screen.FOG.columns=1

    screen.LIGHTING=ambientOcclusionToggle directionalSSAO outlineShimmerToggle
    screen.LIGHTING.columns=1

    screen.TERRAIN=normalmapEnabled normalmapFormat refractionEnabled <empty> windEffectsEnabled windIntensity
    screen.TERRAIN.columns=1

    screen.CAMERA=camSensorWidth camFStops filmGrainStrength <empty> [BLOOM] [DOF] [MBLUR] [VIGNETTE]
    screen.CAMERA.columns=1

        screen.BLOOM=bloomEnabled bloomIntensity
        screen.BLOOM.columns=1

        screen.DOF=DoFToggle DoFQuality DoFChromaDispersion chromaOffsetScale
        screen.DOF.columns=1

        screen.MBLUR=motionblurToggle <empty> motionblurSamples motionblurScale
        screen.MBLUR.columns=1

        screen.VIGNETTE=vignetteEnabled <empty> vignetteStart vignetteEnd vignetteIntensity vignetteExponent
        screen.VIGNETTE.columns=1

    screen.POST=imageSharpenEnabled screenBitdepth VIEWPORT_GAMUT taaEnabled <empty> [CGRADE] [FTOOL]
    screen.POST.columns=1

        screen.CGRADE=doColorgrading <empty> <empty> <empty> vibranceInt saturationInt gammaCurve brightnessInt constrastInt <empty> colorlumR colorlumG colorlumB

    screen.MISC=*



sliders=sunlightSunriseR sunlightNoonR sunlightSunriseG sunlightNoonG sunlightSunriseB sunlightNoonB sunlightSunriseL sunlightNoonL sunlightSunsetR sunlightNightR sunlightSunsetG sunlightNightG sunlightSunsetB sunlightNightB sunlightSunsetL sunlightNightL \
 skylightSunriseR skylightNoonR skylightSunriseG skylightNoonG skylightSunriseB skylightNoonB skylightSunriseL skylightNoonL skylightSunsetR skylightNightR skylightSunsetG skylightNightG skylightSunsetB skylightNightB skylightSunsetL skylightNightL \
 fogcolSunriseR fogcolNoonR fogcolSunriseG fogcolNoonG fogcolSunriseB fogcolNoonB fogcolSunriseL fogcolNoonL fogcolSunsetR fogcolNightR fogcolSunsetG fogcolNightG fogcolSunsetB fogcolNightB fogcolSunsetL fogcolNightL \
 skycolSunriseR skycolNoonR skycolSunriseG skycolNoonG skycolSunriseB skycolNoonB skycolSunriseL skycolNoonL skycolSunsetR skycolNightR skycolSunsetG skycolNightG skycolSunsetB skycolNightB skycolSunsetL skycolNightL \
 waterFogRed waterFogGreen waterFogBlue waterColorRed waterColorGreen waterColorBlue waterColorAlpha \
 vibranceInt saturationInt gammaCurve brightnessInt constrastInt colorlumR colorlumG colorlumB filmGrainStrength \
 windIntensity bloomIntensity chromaOffsetScale motionblurSamples motionblurScale vignetteStart vignetteEnd vignetteIntensity vignetteExponent camSensorWidth camFStops \
 fogStart fogFalloff waterFogFalloff sunPathRotation



blend.gbuffers_basic=off
blend.gbuffers_block=off
blend.gbuffers_terrain=off
blend.gbuffers_entities=off
blend.gbuffers_hand=off
blend.gbuffers_textured=off
blend.gbuffers_spidereyes=SRC_ALPHA ONE ZERO ONE
blend.gbuffers_armor_glint=SRC_ALPHA ONE ZERO ONE


oldLighting=false
oldHandLight=false
vignette=false
separateAo=true
underwaterOverlay=false
fog=off
supportsColorCorrection=true

texture.noise=tex/noise2D.png

uniform.vec2.viewSize = vec2(viewWidth, viewHeight)
uniform.vec2.pixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

variable.int.fmod8 = frameCounter % 8
uniform.vec2.taaOffset = vec2((if( \
    fmod8 == 0,  0.125, \
    fmod8 == 1, -0.125, \
    fmod8 == 2,  0.625, \
    fmod8 == 3,  0.375, \
    fmod8 == 4, -0.625, \
    fmod8 == 5, -0.875, \
    fmod8 == 6,  0.375, \
    fmod8 == 7,  0.875, \
    0.0)*0.6) / viewWidth, \
    (if( \
    fmod8 == 0, -0.375, \
    fmod8 == 1,  0.375, \
    fmod8 == 2,  0.125, \
    fmod8 == 3, -0.625, \
    fmod8 == 4,  0.625, \
    fmod8 == 5, -0.125, \
    fmod8 == 6, -0.875, \
    fmod8 == 7,  0.875, \
    0.0)*0.6) / viewHeight)

variable.float.upDirNorm    = 1.0 / sqrt((upPosition.x*upPosition.x) + (upPosition.y*upPosition.y) + (upPosition.z*upPosition.z))
uniform.vec3.upDirView      = vec3(upPosition.x*upDirNorm, upPosition.y*upDirNorm, upPosition.z*upDirNorm)
uniform.vec3.upDir          = vec3(0.0, 1.0, 0.0)

variable.float.sunDirNorm   = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
variable.float.svecX        = sunPosition.x * sunDirNorm
variable.float.svecY        = sunPosition.y * sunDirNorm
variable.float.svecZ        = sunPosition.z * sunDirNorm
uniform.vec3.sunDirView     = vec3(svecX, svecY, svecZ)
variable.float.sunDirX      = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunDirY      = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunDirZ      = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunDir         = vec3(sunDirX * sunDirNorm, sunDirY * sunDirNorm, sunDirZ * sunDirNorm)

variable.float.moonDirNorm  = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
variable.float.mvecX        = moonPosition.x * moonDirNorm
variable.float.mvecY        = moonPosition.y * moonDirNorm
variable.float.mvecZ        = moonPosition.z * moonDirNorm
uniform.vec3.moonDirView    = vec3(mvecX, mvecY, mvecZ)
variable.float.moonDirX     = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonDirY     = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonDirZ     = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonDir        = vec3(moonDirX * moonDirNorm, moonDirY * moonDirNorm, moonDirZ * moonDirNorm)

variable.float.lightDirNorm = 1.0 / sqrt((shadowLightPosition.x * shadowLightPosition.x) + (shadowLightPosition.y * shadowLightPosition.y) + (shadowLightPosition.z * shadowLightPosition.z))
uniform.vec3.lightDirView   = vec3(shadowLightPosition.x * lightDirNorm, shadowLightPosition.y * lightDirNorm, shadowLightPosition.z * lightDirNorm)
variable.float.lightDirX    = gbufferModelViewInverse.0.0 * shadowLightPosition.x + gbufferModelViewInverse.1.0 * shadowLightPosition.y + gbufferModelViewInverse.2.0 * shadowLightPosition.z
variable.float.lightDirY    = gbufferModelViewInverse.0.1 * shadowLightPosition.x + gbufferModelViewInverse.1.1 * shadowLightPosition.y + gbufferModelViewInverse.2.1 * shadowLightPosition.z
variable.float.lightDirZ    = gbufferModelViewInverse.0.2 * shadowLightPosition.x + gbufferModelViewInverse.1.2 * shadowLightPosition.y + gbufferModelViewInverse.2.2 * shadowLightPosition.z
uniform.vec3.lightDir       = vec3(lightDirX * lightDirNorm, lightDirY * lightDirNorm, lightDirZ * lightDirNorm)

variable.float.sunY         = sunDirY * sunDirNorm
variable.float.lf1          = (1.0 - ((clamp(-sunY, 0.002, 0.04) - 0.002) / 0.038)) * (1.0 - ((clamp(sunY, 0.002, 0.04) - 0.002) / 0.038))
uniform.float.lightFlip     = clamp(1.0 - lf1, 0.0, 1.0)

#
#       DAYTIME
#

variable.float.timeSunrise  = ((clamp(worldTime, 22500.0, 23500.0) - 22500.0) / 1000.0)  + (1.0-((clamp(worldTime, 0.0, 1500.0) - 0.0)     / 1500.0))
variable.float.timeNoon     = ((clamp(worldTime,     0.0,  1500.0) -     0.0) / 1500.0)  - ((clamp(worldTime, 10500.0, 12000.0) - 10500.0) / 1500.0)
variable.float.timeSunset   = ((clamp(worldTime, 10500.0, 12000.0) - 10500.0) / 1500.0)  - ((clamp(worldTime, 12500.0, 13500.0) - 12500.0) / 1000.0)
variable.float.timeNight    = ((clamp(worldTime, 12500.0, 13500.0) - 12500.0) / 1000.0)  - ((clamp(worldTime, 22500.0, 23500.0) - 22500.0) / 1000.0)
uniform.vec4.daytime        = vec4(pow(timeSunrise, 2.0), pow(timeNoon, 0.5), pow(timeSunset, 2.0), pow(timeNight, 0.5))

#
#       EXPOSURE
#

variable.float.outdoorLevel = 0.7 * timeSunrise + 1.0 * timeNoon + 0.7 * timeSunset + 0.5 * timeNight
variable.float.outdoorExp   = pow(clamp(eyeBrightness.y / 240.0, 0.0, 1.0), 3.0)
variable.float.indoorExp    = pow(clamp(eyeBrightness.x / 240.0, 0.0, 1.0), 2.0)
variable.float.expLevel     = max(indoorExp, 0.15 * (1.0 - outdoorExp) + outdoorLevel * outdoorExp)
variable.float.expSmooth    = smooth(1, expLevel, 4.0, 3.0)
uniform.float.exposureLevel = 1.0 / expSmooth